%%%
%%% Variables
%%%
\part{Variables}
\begin{frame}
\thispagestyle{empty}
\textbf{\huge{Variables}}
\end{frame}

\begin{frame}{Variables Contents}
 \tableofcontents
\end{frame}

\section{Basics}
\subsection{Generate}
\begin{frame}[fragile]{Generate} \index{Generate!generate} \index{Generate!gen} \index{Generate!clonevar} \index{Recode!recode} \index{Table!tab} \index{Generate}
Time and time again generation of variables is required
\begin{lstlisting}
  ** clone variable
  clonevar SEX = sex

  ** generate variable
  gen gender = .
  recode gender . = 1 if sex == 1
  recode gender . = 2 if sex == 2

  ** spot the difference
  tab SEX
  tab gender
\end{lstlisting}
\end{frame}

\subsection{Rename}
\begin{frame}[fragile]{Rename}
Thinking about it we dislike the variable name \texttt{gender}. \index{Rename!rename} \index{Rename}
\begin{lstlisting}
 drop sex // throw this variable away
 ** gender is now called sex
 rename gender sex
\end{lstlisting}
\end{frame}

\begin{frame}[fragile]{Moment \texttt{generate \dots~= .} ?}
Missing values in Stata are identified by the dot. \index{Missing Values!.} \index{Recode!recode}
\begin{lstlisting}
  clonevar edu = school

  ** create a missing
  recode edu 10 = .
  ** different missing values (Stata knows .a - .z)
  recode edu 9 = .a
  recode edu 8 = .b
  recode edu 7 = .c
\end{lstlisting}

  
  \begin{tikzpicture}[transform shape, rotate=10, overlay]
\node at (7.5,-1.5) [mybox] (box) {%
    \begin{minipage}[t!]{0.35\textwidth}
    \tiny\textcolor{black}{\texttt{Additionaly the dot is $\pm\infty$ and is Statas biggest value.}}
    \end{minipage}
    };
\end{tikzpicture}

\end{frame}

\begin{frame}[fragile]{A moment please \texttt{\dots~if \dots~== 1} ?}
% Durch \texttt{if} werden in Stata Bedingungen festgelegt. Im Beispiel wird die Variable \texttt{geschlecht} auf den Wert $1$ gesetzt, wenn die Variable \texttt{sex} den Wert $1$ hat. Solche Bedingungen sind für eine ganze Reihe von Befehlen möglich und können im Regelfall auch verknüpft werden.
Bedingungen \index{Tabelle!tab} \index{if} \index{if!und \&} \index{if!oder \|}
\begin{lstlisting}
** sex in county 1 and school 1 or 2
  tab sex if county == 1 & ///
    (school == 1 | school == 2)
\end{lstlisting}
  \begin{tikzpicture}[transform shape, rotate=10, overlay]
\node at (7.5,-1.5) [mybox] (box) {%
    \begin{minipage}[t!]{0.35\textwidth}
    \tiny\textcolor{black}{\texttt{The condition is following the if-statement. Different contditions can be linked using $\&$ and $|$. Linked conditions require variable names within each condition!}}
    \end{minipage}
    };
\end{tikzpicture}
\end{frame}

\begin{frame}[fragile]{and \texttt{tab} ?}
% Der Befehl \texttt{tab} ist eine Kurzform von tabulate. Kurzschreibweisen findet man durch das Studium der Helpfiles.\vspace{0.5cm}
\texttt{tab} is short for\\ \vspace{0.5cm} \index{Tabelle!tab} \index{Hilfe!help}
\begin{scriptsize}
\texttt{
  \textcolor{Statakeywords}{help tabulate twoway} \\
  ~\underline{tab}ulate \textcolor{Statakeywords}{varname1} \textcolor{Statakeywords}{varname2} [\textcolor{Statakeywords}{if}] [ \dots
} \vspace{0.5cm}
\end{scriptsize}

  \begin{tikzpicture}[transform shape, rotate=10, overlay]
\node at (7.5,-1.5) [mybox] (box) {%
    \begin{minipage}[t!]{0.35\textwidth}
    \tiny\textcolor{black}{\texttt{The underlined part shows the minimum letters Stata requires for identification of a command.}}
    \end{minipage}
    };
\end{tikzpicture}
\end{frame}

\subsection{Label}
\begin{frame}[fragile]{Label} \index{Label!label} \index{Label!label variable} \index{Label!label define} \index{Label!label values} \index{Tabelle!nolabel}
To label a variable, lable have to be defined and afterwards applied
\begin{lstlisting}
  ** label a variable
  label variable sex "Sex"
  ** define label for values
  label define labsex 1 "male" 2 "female"
  ** assign label to variable
  label values sex labsex 
\end{lstlisting}
Now labels are assigned
\begin{lstlisting}
  tab sex
  tab sex, nolabel
\end{lstlisting}
\end{frame}

\section{Elaborated}
\subsection{Generate using Math}
\begin{frame}[fragile]{Generate II} \index{Generate!gen} \index{Generate}
It is possible to create variables using mathematical expressions
\begin{lstlisting}
  // create fantasy weight and height
  replace weight = weight / 2.2
  replace height = height * 0.004

  // bmi for lbs and in
  gen bmi = (weight / (height ^ 2))

  /* other examples
  ** householdincome
  gen hhinc = inc_female + inc_male
  ** age in 2016
  gen age = 2016 - gebjahr
  */
\end{lstlisting}
\end{frame}

\subsection{Recode into a new Variable}
\begin{frame}[fragile]{Generate III} \index{Generate!gen} \index{Recode!recode}
A new variable is created from recoded values. The original variable is not modified.
\begin{lstlisting}
  recode school ///
    (10=.) ///
    (1=1 "One") ///
    (2=2 "Two") ///
    (3 5 6 7 8 = 99 "Ninetynine") ///
    (4=3 "Three") ///
    (9=5 "Five"), gen (school_rec)
\end{lstlisting}

  \begin{tikzpicture}[transform shape, rotate=10, overlay]
\node at (7.5,-1.5) [mybox] (box) {%
    \begin{minipage}[t!]{0.35\textwidth}
    \tiny\textcolor{black}{\texttt{Variable names begin with a letter.}}
    \end{minipage}
    };
\end{tikzpicture}

\end{frame}

\begin{frame}[fragile]{A moment please \texttt{///} ?} \index{display} \index{newline} \index{newline!///} \index{newline!delimit}
Three following \textit{Slashes} indicate to Stata, a command will continue in the following line.
\begin{lstlisting}
  ** everything in a single line
  display 1 + 1 
  ** now with a (unneeded) linebreak
  display 1 + ///
    1
\end{lstlisting}

  \begin{tikzpicture}[transform shape, rotate=10, overlay]
\node at (7.5,-1.5) [mybox] (box) {%
    \begin{minipage}[t!]{0.35\textwidth}
    \tiny\textcolor{black}{\texttt{This way two and more lines can be connected. This makes your syntax more readable. Else check help delimit}}
    \end{minipage}
    };
\end{tikzpicture}
\end{frame}

\subsection{Categorize} 
\begin{frame}[fragile]{Rekodieren} \index{Categorize} \index{Generate!clonevar} \index{Recode!recode}
Sometimes it is helpful to categorize metric variables
\begin{lstlisting}
  ** create rounded values
  gen bmi_r = round(bmi)
  recode bmi_r ///
    (0/18.5=1) ///
    (18.5/25.0=2) ///
    (25.0/30.0=3) ///
    (30.0/60=4)
    
  tab bmi_r
\end{lstlisting}

  \begin{tikzpicture}[transform shape, rotate=10, overlay]
\node at (7.5,-1.5) [mybox] (box) {%
    \begin{minipage}[t!]{0.35\textwidth}
    \tiny\textcolor{black}{\texttt{0/18 means from 0 to 18. 25/30 from 25 to 30. Be careful with the category range!}}
    \end{minipage}
    };
\end{tikzpicture}
\end{frame}

\subsection{Missing Values}
\begin{frame}[fragile]{Data preparation} \index{Missing Values} \index{Missing Values!mvdecode} \index{Missing Values!mv()}
Lets have a look at our fantasy weights data. We replace a few values with different values
\begin{lstlisting}  
  ** weight
  replace weight = -1 if weight < 40
  replace weight = -2 if weight > 140
  
  mean weight  
\end{lstlisting}
Now we decode these values as missing values
\begin{lstlisting}
  mvdecode weight, mv (-1=.a\-2=.b)
  mean weight
\end{lstlisting}


  \begin{tikzpicture}[transform shape, rotate=10, overlay]
\node at (7.5,-1.5) [mybox] (box) {%
    \begin{minipage}[t!]{0.35\textwidth}
    \tiny\textcolor{black}{\texttt{In the SOEP negative values are typically missing values.}}
    \end{minipage}
    };
\end{tikzpicture}
\end{frame}

\subsection{Variable Handling}
\begin{frame}[fragile]{Mistakes} \index{Mistakes} \index{drop}
% \begin{minipage}{11cm}
After hours of work you figure that you have made a mistake and want to modify the just created variable \texttt{bmi_r}. What now?
\begin{itemize}
 \item Luckily you have not touched the original data. Just run your do-file up to the point where the mistake is located.
 \item You already spotted the error and want to rerun the variable creation. Simply remove the variable
 \begin{lstlisting}
  drop bmi_r
 \end{lstlisting}
\end{itemize}
% \end{minipage}
\end{frame}

\section{Save and Import}
\subsection{Speichern}
\begin{frame}[fragile]{Daten sichern} \index{Speichern!save} \index{Speichern!replace} \index{Speichern}
% Ein langer erfolgreicher Arbeitstag geht zuende. Sie wollen Ihre bisherigen Ergebnisse sichern.
Speichern Sie ihr Do-File in einen Ordner \textit{do-files} und ihre Daten in einen Ordner \textit{data}.
\begin{lstlisting}
  save "D:/Daten/data/testdaten_rekodiert.dta"
\end{lstlisting}
Zum erneuten Speichern muss ein anderer Dateiname angegeben werden oder die Option \texttt{replace} genutzt werden.
\begin{lstlisting}
  save "D:/Daten/data/testdaten_rekodiert.dta", replace
\end{lstlisting}

  \begin{tikzpicture}[transform shape, rotate=10, overlay]
\node at (7.5,-1.8) [mybox] (box) {%
    \begin{minipage}[t!]{0.35\textwidth}
    \tiny\textcolor{black}{\texttt{Einmal ersetzte Datensätze sind unwiderruflich überschrieben. Überschreiben Sie \underline{niemals} die Originaldaten!}}
    \end{minipage}
    };
\end{tikzpicture}
\end{frame}

\subsection{Laden}
\begin{frame}[fragile]{Daten wieder einlesen} \index{Laden!use} \index{Laden!clear} \index{Laden}
Mit der Option \texttt{clear} wird der aktuelle Datensatz ersetzt.
\begin{lstlisting}
  use "D:/Daten/data/testdaten.dta", clear
\end{lstlisting}

  \begin{tikzpicture}[transform shape, rotate=10, overlay]
\node at (7.5,-1.8) [mybox] (box) {%
    \begin{minipage}[t!]{0.35\textwidth}
    \tiny\textcolor{black}{\texttt{Mögliche Veränderungen an vorhandenen eingelesenen Datensätzen werden ignoriert. Sie zwingen Stata hier ein Verhalten auf, vor dem Stata Sie sonst normal warnt.}}
    \end{minipage}
    };
\end{tikzpicture}
\end{frame}